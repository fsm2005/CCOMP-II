{
    char input[100];
    int continuar = 1;

    while (continuar) {
        printf("Enter your choice:\n");
        printf("1. Print name\n");
        printf("2. Print i-th Fibonacci number\n");
        printf("3. Exit program\n");
        fgets(input, sizeof(input), stdin);

        if (!es_positivo(input)) {
            continue;
        }

        int opcion = atoi(input);
// Maneja el menu
        switch (opcion) {
            case 1: {
                char nombre[100];
                printf("Introduce nombre: ");
                fgets(nombre, sizeof(nombre), stdin);
                nombre[strcspn(nombre, "\n")] = '\0';  // Eliminar '\n'

                pthread_mutex_lock(&lock);
                NombreArgs* arg = malloc(sizeof(NombreArgs));
                arg->id = thread_id_counter++;
                strcpy(arg->nombre, nombre);
                pthread_create(&threads[thread_count++], NULL, imprimir_nombre, arg);
                pthread_mutex_unlock(&lock);
                break;
            }
            case 2: {
                printf("Numero fabinacci: ");
                fgets(input, sizeof(input), stdin);

                if (!es_positivo(input)) {
                    printf("Error, introdusca numero positivo\n");
                    continue;
                }

                int n = atoi(input);

                pthread_mutex_lock(&lock);
                int* args = malloc(2 * sizeof(int));
                args[0] = thread_id_counter++;
                args[1] = n;
                pthread_create(&threads[thread_count++], NULL, fibonacci_recusivo, args);
                pthread_mutex_unlock(&lock);
                break;
            }
            case 3:
                continuar = 0;
                for (int i = 0; i < thread_count; ++i) {
                    pthread_cancel(threads[i]);
                }
                printf("Salir del programa.\n");
                break;

        }
    }

    return 0;
}
